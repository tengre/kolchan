#!/usr/bin/env bash
#
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
eval "__aId=( $Id: git-add-id 77 2019-05-27 15:58:36+04:00 yds $ )"
#
#
#
kolchan::git-add-id::usage() {

  local rc=$?

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${__aId[2]}"                                                   \
            "${__aId[3]}"                                                      \
            "2016-$(date +%Y)"

#****h* kolchan/git-add-id
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Easy way to emulate SVN keywords. Currently, compound keyword "Id"  handled
#    only. Revision number (aka "Rev")  is  a  total number of completed commits
#    plus one as the expected next commit. "Author" part of the "Id" is a system
#    name of the current user (id -nu ). May be  overloaded  by  special  option
#    "user.id" from git config, but like single word only. Keyword "Id" value is
#    updated before adding to the git index.
#  USAGE
#    git-add-id [ -h|--help ] | [<files> ...]
#  ARGUMENTS
#    -h, --help - show this usage and exit
#    <files>    - files for forced addition to the git index with updating the
#                 keyword "Id" (if needed)
#                 The default (no arguments) - added only modified files, which
#                 are already included to the git repository.
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#    git init
#    echo '$(printf '\044Id\044')' > git-add-id.txt
#    git-add-id git-add-id.txt
#    output: try add to index with Revision 1:
#    output: added to index  .. "git-add-id.txt"
#    cat git-add-id.txt
#    output: $(printf '\044Id') git-add-id.txt 1 $( date --rfc-3339=s ) $( id -nu ) $(printf '\044')
	EOF

  exit $rc

}
#******
#****f* kolchan/gitAddFile
#  USAGE
#    gitAddFile <revision> <file>
#  DESCRIPTION
#    modify existing in the <file> keyword "Id" with <revision> and add this
#    file to the git index
#  ARGUMENTS
#    <revision>      - usually summary commits number from 'git status -s'
#    <file>          - target file for updating and indexing
#  ERRORS
#    NoSuchFileOrDir - <file> not found
#    InvalidArgument - <file> is directory
#  SOURCE
gitAddFile() {

  local fmt fn ic ts ui s

  fmt='sed -i -re "s/%sId(.*)?%s/%s/" %s'

  : ${bIndexed:=0}

  ic=$1
  shift

  errorify on NoSuchFile $* || error warn+return "${*:-no arguments} - file expected.."

  fn="${@##*/}"
  ts="$( date --rfc-3339=s )"
  ui="$( git config --get user.id )"
  [[ $ui && ! $ui =~ [[:space:]] ]] || ui="$( _ sUser )"

  throw on EmptyVariable fn ic ts ui

  s="$( printf '\044Id: %s %d %s %s \044\n' "$fn" "$ic" "$ts" "$ui" )"

  if ! eval "$( printf "$fmt" '\\\$' '\\\$' '$s' '"$@"')"; then

    error warn "$@ - keyword $(printf '\044Id\044') not modified.."

  fi

  if git add "$@"; then

    s="added to index "
    bIndexed=$(( bIndexed +1 ))
    tsIndexed=$ts

  else

    s="indexing failed"

  fi

  err::debug 0 "${s} .. \"${@}\""

}
#******
kolchan::git-add-id::main() {

  throw on CommandNotFound bc date git grep id sed xargs

  local bIndexed i tsIndexed s

  ## TODO use CLI options
  eval set -- "$( _ sArg )"

  [[ $1 =~ ^--?h ]] && kolchan::git-add-id::usage

  git status >/dev/null 2>&1

  if (( $? == 128 )); then

    err::debugf 0 "\n  [!]Warn: git repository (or any of the parent directories): .git not found..\n  show usage by --help option..\n"
    return 128

  fi

  tsIndexed="$( git log -1 --pretty=format:"%ci" 2>/dev/null | cut -f1 -d' ' )"

  if LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null;
  then

    i=0

  else

    i="$( exec -c git shortlog -s | grep -o '[[:digit:]]*' | xargs | tr ' ' '+' | bc )"

    if ! std::isNumber $i; then
      [[ $PRJ_COMMITS ]] && i=$PRJ_COMMITS
    fi

  fi

  err::debug 0 "timestamp $tsIndexed :: total commits $i"

  std::isNumber $i || error NotNumber throw "$i - summary of the commits expected"

  i=$(( i+1 ))

  err::debug 0 "try add to index with Revision ${i}:"

  if [[ $@ ]]; then

    for s in "$@"; do

      gitAddFile $i "$s"

    done

  else

    while read -t 8 s; do

      if   [[ $s =~ ^@@ ]]; then

        gitAddFile $i "${s#@@*}"

      elif [[ $s =~ ^M[^M][[:space:]](.*)$ ]]; then

        err::debug 0 "already indexed .. \"${BASH_REMATCH[1]}\""

      fi

    done< <( git status -s $s | sed -re "s/^[ AM][M].(.*)$/@@\1/" )

  fi

  if [[ -f ChangeLog ]]; then

    (( bIndexed == 0 )) && i=$(( i - 1 ))

    printf -- "%s %d %s\n"                                                     \
              "$(                                                              \
                  sed -n "3p" ChangeLog |                                      \
                    sed -e "s/[[:space:]]*Version[[:space:]]*//i"              \
              )"                                                               \
              "$i" "$tsIndexed" > VERSION

  fi

}
#
#
#
kolchan::git-add-id::main
#
