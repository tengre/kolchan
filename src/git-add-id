#!/usr/bin/env bash
#
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
# $Git: git-add-id 0.8-114-22 2020-05-05 14:35:37+04:00 dsyakupo $
#
kolchan::git-add-id::usage() {

  local rc=$? dt="$( stat -c %y $0 )" S="$( exec -c printf -- '\044')"
  local -a a=( $(grep -o "${S}Git: .*${S}" $0 | head -n 1) )

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${a[1]:=${0##*/}}"                                                \
            "${a[2]:=?}"                                                       \
            "${a[3]:=${dt%% *}}"                                               \
            "2016-$(std::date %Y)"

#****h* kolchan/git-add-id
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Easy  way  to  emulate  compound  SVN keyword "Id" without using git hooks.
#    The  “Revision” part (aka “Rev”) of the keyword “Id” is the total number of
#    completed  commits plus one expected next commit. "Author" part of the "Id"
#    is  the  system  name  of  the current user (id -nu).  May be overloaded by
#    special  option  "user.id"  from  git config, but like single word only for
#    compatibility. The  "Id"  value  is updated before adding to the git index.
#    In  addition  to  "Id",  the  "Git"  keyword  is  processed, which uses the
#    combination of the actual tag (version), the total number of commits before
#     setting the actual tag and the number of commits of the actual tag.
#  USAGE
#    git-add-id [ -h|--help ] | [<files> ...]
#  ARGUMENTS
#    -h, --help - show this usage and exit
#    <files>    - files for forced addition to the git index with updating the
#                 keyword(s) "Id"/"Git" (if needed)
#                 The default (no arguments) - added only modified files, which
#                 are already included to the git repository.
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#    git init
#    echo '${S}Id${S}' > git-add-id.txt
#    git-add-id git-add-id.txt
#    output: try add to index with Revision 1:
#    output: added to index  .. "git-add-id.txt"
#    cat git-add-id.txt
#    output: ${S}Id git-add-id.txt 1 $(exec -c date --rfc-3339=s) $(id -nu) $S
	EOF

  exit $rc

}
#******
#****f* git-add-id/gitAddFile
#  USAGE
#    gitAddFile <revision> <git revision> <file>
#  DESCRIPTION
#    modify  existing in the <file> keyword "Id" and/or "Git" with special value
#    and add this file to the git index
#  ARGUMENTS
#    <revision>      - usually total commits from 'git status -s' or 0
#    <git revision>  - git describe output with total commits or initial value
#    <file>          - target file for updating and indexing
#  ERRORS
#    NoSuchFileOrDir - <file> not found
#    InvalidArgument - <file> is directory
#  SOURCE
gitAddFile() {

  local fmtG fmtI fn g i t u s

  fmtI='sed -i -re "s/%sId(.*)?%s/%s/" %s'
  fmtG='sed -i -re "s/%sGit(.*)?%s/%s/" %s'

  : ${bIndexed:=0}

  i=$1
  g=$2
  shift 2

  errorify on NoSuchFile $* ||
    error warn+return "${*:-no arguments} - file expected.."

  fn="${@##*/}"
   t="$( date --rfc-3339=s )"
   u="$( git config --get user.id )"

  [[ $u && ! $u =~ [[:space:]] ]] || u="$( _ sUser )"

  throw on EmptyVariable fn g i t u

  s="$( printf '\044Id: %s %d %s %s \044\n' "$fn" "$i" "$t" "$u" )"

  if ! eval "$( printf "$fmtI" '\\\$' '\\\$' '$s' '"$@"')"; then
    error warn "$@ - keyword $(printf '\044Id\044') not modified.."
  fi

  s="$( printf '\044Git: %s %s %s %s \044\n' "$fn" "${g}" "$t" "$u" )"
  if ! eval "$( printf "$fmtG" '\\\$' '\\\$' '$s' '"$@"')"; then
    error warn "$@ - keyword $(printf '\044Git\044') not modified.."
  fi

  if git add "$@"; then

    s="added to index "
    bIndexed=$(( bIndexed +1 ))
    tsIndexed=$t

  else

    s="indexing failed"

  fi

  err::debug 0 "${s} .. \"${@}\""

}
#******
kolchan::git-add-id::main() {

  throw on CommandNotFound date head git grep id sed stat xargs
  local bIndexed iCommits tsIndexed s sGit

  ## TODO use CLI options
  eval set -- "$( _ sArg )"

  [[ $1 =~ ^--?h ]] && kolchan::git-add-id::usage

  git status >/dev/null 2>&1

  if (( $? == 128 )); then

    err::debugf 0 "\n  %s: %s\n  %s\n"                                         \
                  "Error: git repository (or any of the parent directories):"  \
                  ".git not found.."                                           \
                  "show usage by --help option.."
    return 128

  fi

  tsIndexed="$( git log -1 --pretty=format:"%ci" 2>/dev/null | cut -f1 -d' ' )"

  if LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null;
  then

    iCommits=0

  else

    iCommits=$((
      $(
         exec -c git shortlog -s          |
           exec -c grep -o '[[:digit:]]*' |
             xargs                        |
               exec -c tr ' ' '+'
      )
    ))

    if ! std::isNumber $iCommits; then
      [[ $PRJ_COMMITS ]] && iCommits=$PRJ_COMMITS
    fi

  fi

  std::isNumber $iCommits ||
    error NotNumber throw "$iCommits - summary of the commits expected"

  iCommits=$(( iCommits+1 ))

  if a=$( git describe --long 2>/dev/null ); then
    a=( ${a//-/ } )
    iTag=$((${a[$((${#a[@]}-2))]}+1))
    std::isNumber $iTag || iTag='1'
    unset a[$((${#a[@]}-1))]
    unset a[$((${#a[@]}-1))]
    sTag="${a[@]}"
    sTag="${sTag// /-}"
  else
    iTag='1'
    sTag='0.0'
  fi

  sGit="${sTag}-$((iCommits-iTag))-${iTag}"

  err::debug 2 "timestamp $tsIndexed | total commits $iCommits | git rev $sGit"
  err::debug 0 "try add to index with Revision ${iCommits}:"

  if [[ $@ ]]; then

    for s in "$@"; do

      gitAddFile "$iCommits" "$sGit" "$s"

    done

  else

    while read -t 8 s; do

      if   [[ $s =~ ^@@ ]]; then

        gitAddFile "$iCommits" "$sGit" "${s#@@*}"

      elif [[ $s =~ ^M[^M][[:space:]](.*)$ ]]; then

        err::debug 0 "already indexed .. \"${BASH_REMATCH[1]}\""

      fi

    done< <( git status -s $s | sed -re "s/^[ AM][M].(.*)$/@@\1/" )

  fi

  if [[ -f ChangeLog ]]; then

    (( bIndexed == 0 )) && iCommits=$(( iCommits - 1 ))

    if [[ $sGit ]]; then
      s=${sGit//-/.}
    else
      s="$(sed -n "3p" ChangeLog | sed -e "s/[[:space:]]*Version[[:space:]]*//i")"
    fi
    printf -- "%s %d %s\n" "$s" "$iCommits" "$tsIndexed" > VERSION

  fi

}
#
#
#
kolchan::git-add-id::main
#
