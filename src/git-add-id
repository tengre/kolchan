#!/bin/bash
#
#
_bashlyk=developing . bashlyk
#
#
#
eval "__aId=( $Id: git-add-id 30 2018-07-10 19:55:06+04:00 toor $ )"
#
#
#
git::usage() {

  local rc=$?

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${__aId[2]}"                                                   \
            "${__aId[3]}"                                                      \
            "2016-$(date +%Y)"

#****h* svn2git/git-add-id
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    emulation keyword "Id" when you add a file to a index of the git repo
#
#  USAGE
#    git-add-id [ -h|--help ] | [<files>]
#
#  ARGUMENTS
#    -h, --help - show this usage and exit
#    <files>    - files for forced addition to index with updating the "Id"
#                 The default (no arguments) - add only modified files, which
#                 are already included in the repo.
#
#  USES
#    bashlyk >= 1.91.777
#
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#
	EOF

  exit $rc

}
#******
#****f* svn2git/git::add
#  USAGE
#    git::add <number> <file>
#  DESCRIPTION
#    modify existing in the <file> keyword "Id" with <number> and add this file
#    to index
#  ARGUMENTS
#    <number>        - summary commits number from 'git status -s'
#    <file>          - target file for updating and indexing
#  ERRORS
#    InvalidArgument - <file> is directory
#  SOURCE
git::add() {

  local fmt fn ic ts ui s

  fmt='sed -i -re "s/%sId(.*)?%s/%s/" %s'

  : ${bIndexed:=0}

  ic=$1
  shift

  errorify+warn on NoSuchFileOrDir "$@"

  [[ -d "$@" ]] && error InvalidArgument warn+return "$@ - file expected.."

  fn="${@##*/}"
  ts="$( date --rfc-3339=s )"
  ui="$( _ sUser )"

  throw on EmptyVariable fn ic ts ui

  s="$( printf '\044Id: %s %d %s %s \044\n' "$fn" "$ic" "$ts" "$ui" )"

  if ! eval "$( printf "$fmt" '\\\$' '\\\$' '$s' '"$@"')"; then

    error warn "$@ - keyword $(printf '\044Id\044') not modified.."

  fi

  if git add "$@"; then

    s="added to index "
    bIndexed=$(( bIndexed +1 ))
    tsIndexed=$ts

  else

    s="indexing failed"

  fi

  err::debug 0 "${s} .. \"${@}\""

}
#******
git::main() {

  throw on CommandNotFound bc date git grep sed xargs

  local bIndexed i tsIndexed s

  eval set -- "$( _ sArg )"

  [[ $1 =~ ^--?h ]] && git::usage

  git status >/dev/null 2>&1
  
  if (( $? == 128 )); then

    err::debugf 0 "\n  [!]Warn: git repository (or any of the parent directories): .git not found..\n  show usage by --help option..\n"
    return 128

  fi

  tsIndexed="$( git log -1 --pretty=format:"%ci" 2>/dev/null | cut -f1 -d' ' )"

  if LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null;
  then

    i=0

  else

    i="$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )"

  fi

  std::isNumber $i || error NotNumber throw "$i - summary of the commits expected"

  i=$(( i+1 ))

  err::debug 0 "try add to index with $( printf -- '\044Id\044' ) ${i}:"

  if [[ $@ ]]; then

    for s in "$@"; do

      git::add $i "$s"

    done

  else

    while read -t 8 s; do

      if   [[ $s =~ ^@@ ]]; then

        git::add $i "${s#@@*}"

      elif [[ $s =~ ^M[^M][[:space:]](.*)$ ]]; then

        err::debug 0 "already indexed .. \"${BASH_REMATCH[1]}\""

      fi

    done< <( git status -s $s | sed -re "s/^[ AM][M].(.*)$/@@\1/" )

  fi

  if [[ -f ChangeLog ]]; then

    (( bIndexed == 0 )) && i=$(( i - 1 ))

    printf -- "%s %d %s\n"                                                     \
              "$(                                                              \
                  sed -n "3p" ChangeLog |                                      \
                    sed -e "s/[[:space:]]*Version[[:space:]]*//i"              \
              )"                                                               \
              "$i" "$tsIndexed" > VERSION

  fi

}
#
#
#
git::main
#
