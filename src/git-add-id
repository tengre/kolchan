#!/usr/bin/env bash
#
# $Git: git-add-id 1.0-3-142 2023-05-09 13:03:11+00:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
kolchan::git-add-id::usage() {

  local rc=$? dt="$(stat -c %y $0)" S="$(exec -c printf -- '\044')"
  local -a a=( $(grep -o "${S}Git: .*${S}" $0 | head -n 1) )

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${a[1]:=${0##*/}}"                                                \
            "${a[2]:=?}"                                                       \
            "${a[3]:=${dt%% *}}"                                               \
            "2016-$(std::date %Y)"

#****h* kolchan/git-add-id
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Easy  way  to  emulate  compound  SVN keyword "Id" without using git hooks.
#    The  “Revision” part (aka “Rev”) of the keyword “Id” is the total number of
#    completed  commits plus one expected next commit. "Author" part of the "Id"
#    is  the  system  name  of  the current user (id -nu).  May be overloaded by
#    special  option  "user.id"  from  git config, but like single word only for
#    compatibility. The  "Id"  value  is updated before adding to the git index.
#    In addition to the "Id",  the "Git" keyword is represented as a combination
#    of the current git tag (version),  the number of commits since the creation
#    of the current tag (build), the total number of commits before the creation
#    of the current tag (stable revision),  and  the timestamp, ID of the author
#    of the changes.
#  USAGE
#    git-add-id [ -h|--help ] | [<files> ...]
#  ARGUMENTS
#    -h, --help - show this usage and exit
#    <files>    - files for forced addition to the git index with updating the
#                 keyword(s) "Id"/"Git" (if needed)
#                 The default (no arguments) - added only modified files, which
#                 are already included to the git repository.
#  USES
#    bashlyk >= 1.96
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#    git init
#    echo '${S}Id${S}' > git-add-id.txt
#    git-add-id git-add-id.txt
#    output: try add to index with Revision 1:
#    output: modify keywords in file: "git-add-id.txt" .. successfully added to index
#    cat git-add-id.txt
#    output: ${S}Id git-add-id.txt 1 $(exec -c date --rfc-3339=s -u) $(id -nu) $S
	EOF

  exit $rc

}
#******
#****f* git-add-id/gitAddFile
#  USAGE
#    gitAddFile <revision> <git revision> <file>
#  DESCRIPTION
#    modify  existing in the <file> keyword "Id" and/or "Git" with special value
#    and add this file to the git index
#  ARGUMENTS
#    <revision>      - usually total commits from 'git status -s' or 0
#    <git revision>  - git describe output with total commits or initial value
#    <file>          - target file for updating and indexing
#  ERRORS
#    NoSuchFileOrDir - <file> not found or missing argument
#    InvalidArgument - <file> is directory
#    EmptyVariable   - internal error
#  RETURNS
#    0 - <file> added to index
#    1 - <file> failed add to index
#  SOURCE
gitAddFile() {

  local author fmtGitKeywordEdit fmtSvnKeywordEdit keywordGit keywordSvn logTag rc s stagedFile timestamp

  fmtGitKeywordEdit='sed -i -re "s/%sGit(.*)?%s/%s/" %s'
  fmtSvnKeywordEdit='sed -i -re "s/%sId(.*)?%s/%s/" %s'
  logTag='modify keywords in file: '

  keywordSvn=$1
  keywordGit=$2
  shift 2

  errorify on NoSuchFile $* ||
    error warn+return "${logTag}${*:-no arguments} - file expected.."

  stagedFile="${@##*/}"
  timestamp="$(exec -c date --rfc-3339=s -u)"
  author="$(git config --get user.id)"

  [[ $author && ! $author =~ [[:space:]] ]] || author="$( _ sUser )"

  throw on EmptyVariable author keywordGit keywordSvn stagedFile timestamp

  s="$( printf '\044Id: %s %d %s %s \044\n' "$stagedFile" "$keywordSvn" "$timestamp" "$author" )"

  if ! eval "$( printf "$fmtSvnKeywordEdit" '\\\$' '\\\$' '$s' '"$@"')"; then
    error warn "${logTag}${@} - keyword $(printf '\044Id\044') not modified.."
  fi

  s="$( printf '\044Git: %s %s %s %s \044\n' "$stagedFile" "${keywordGit}" "$timestamp" "$author" )"
  if ! eval "$( printf "$fmtGitKeywordEdit" '\\\$' '\\\$' '$s' '"$@"')"; then
    error warn "${logTag}${@} - keyword $(printf '\044Git\044') not modified.."
  fi

  if ! git add "$@"; then
    err::debug 0 "${logTag}\"${@}\" .. failed add to index"
    return 1
  fi
  err::debug 0 "${logTag}\"${@}\" .. successfully added to index"
  return 0
}
#******
kolchan::git-add-id::main() {

  throw on CommandNotFound date head git grep id sed stat xargs wc
  local bIndexed iCommits s sGit tsIndexed

  ## TODO use CLI options
  eval set -- "$(_ sArg)"

  [[ $1 =~ ^--?h ]] && kolchan::git-add-id::usage

  git status >/dev/null 2>&1

  if (( $? == 128 )); then
    err::debugf 0 "\n  %s: %s\n  %s\n"                                         \
                  "Error: git repository (or any of the parent directories):"  \
                  ".git not found.."                                           \
                  "show usage by --help option.."
    return 128
  fi

  tsIndexed="$(exec -c date --rfc-3339=s -u --date "$(git log -1 --pretty=format:"%cI" 2>/dev/null)" 2>/dev/null)"

  if LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null;
  then
    iCommits=0
  else
    iCommits=$(git log --oneline | wc -l)

    ## TODO deprecated
    if ! std::isNumber $iCommits; then
      [[ $PRJ_COMMITS ]] && iCommits=$PRJ_COMMITS
    fi
  fi

  std::isNumber $iCommits ||
    error NotNumber throw "$iCommits - summary of the commits expected"

  iCommits=$((iCommits+1))

  if a=$(git describe --long 2>/dev/null); then
    a=( ${a//-/ } )
    iTag=$((${a[$((${#a[@]}-2))]}+1))
    std::isNumber $iTag || iTag='1'
    unset a[$((${#a[@]}-1))]
    unset a[$((${#a[@]}-1))]
    sTag="${a[@]}"
    sTag="${sTag// /-}"
  else
    iTag='1'
    sTag='0.0'
  fi

  # remove lead 'v' from tag
  sGit="${sTag#*v}-${iTag}-$((iCommits-iTag))"

  err::debug 0 "try add to index with Revision ${iCommits}:"
  bIndexed=0
  if [[ $@ ]]; then
    for s in "$@"; do
      gitAddFile "$iCommits" "$sGit" "$s" && bIndexed=$((bIndexed+1))
    done
  else
    while read -t 32 s; do
      if [[ $s =~ ^@@ ]]; then
        gitAddFile "$iCommits" "$sGit" "${s#@@*}" && bIndexed=$((bIndexed+1))
      elif [[ $s =~ ^M[^M][[:space:]](.*)$ ]]; then
        err::debug 0 "already indexed .. \"${BASH_REMATCH[1]}\""
      fi
    done< <(git status -s | sed -re "s/^[ AM][M].(.*)$/@@\1/")
  fi

  # optional
  if [[ -f ChangeLog ]]; then
    if [[ $sGit ]]; then
      s=${sGit//-/.}
      if ((bIndexed == 0)); then
        iCommits=$((iCommits-1))
      else
        tsIndexed="$(exec -c date --rfc-3339=s -u)"
      fi
      printf -- "%s %d %s\n" "$s" "$iCommits" "$tsIndexed" > VERSION
    fi
  fi
}
#
#
#
kolchan::git-add-id::main
#
