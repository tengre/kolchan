#!/bin/bash
#
#
. bashlyk
#
#
#
eval "__aId=( $Id: git-add-id 23 2017-02-17 15:26:25+04:00 toor $ )"
#
#
#
udfUsage() {

  local rc=$?

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${__aId[2]}"                                                   \
            "${__aId[3]}"                                                      \
            "2016-$(date +%Y)"

#****h* svn2git/git-add-id
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    emulation keyword "Id" when you add a file to a index of the git repo
#
#  USAGE
#    git-add-id [ -h|--help ] | [<files>]
#
#  ARGUMENTS
#    -h, --help - show this usage and exit
#    <files>    - files for forced addition to index with updating the "Id"
#                 The default (no arguments) - add only modified files, which
#                 are already included in the repo.
#
#  USES
#    bashlyk >= 1.89.689
#
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#
	EOF

  exit $rc

}
#******
#****f* svn2git/udfGitAddWithId
#  USAGE
#    udfGitAddWithId <number> <file>
#  DESCRIPTION
#    modify existing in the <file> keyword "Id" with <number> and add this file
#    to index
#  ARGUMENTS
#    <number>        - summary commits number from 'git status -s'
#    <file>          - target file for updating and indexing
#  ERRORS
#    InvalidArgument - <file> is directory
#  SOURCE
udfGitAddWithId() {

  local fmt fn ic ts ui s

  fmt='sed -i -re "s/%sId(.*)?%s/%s/" %s'

  ic=$1
  shift

  [[ -e "$@" ]] || eval $(                                                     \
                                                                               \
    udfOnError retwarn NoSuchFileOrDir "$@"                                    \
                                                                               \
  )

  [[ -d "$@" ]] && eval $(                                                     \
                                                                               \
    udfOnError retwarn InvalidArgument "$@ - directories not supported now"    \
                                                                               \
  )

  fn="${@##*/}"
  ic=$(( ic + 1 ))
  ts="$( date --rfc-3339=s )"
  ui="$( _ sUser )"

  udfThrowOnEmptyVariable fn ic ts ui

  s="$( printf '\044Id: %s %d %s %s \044\n' "$fn" "$ic" "$ts" "$ui" )"

  if ! eval "$( printf "$fmt" '\\\$' '\\\$' '$s' '"$@"')"; then

    eval $(

      udfOnError warn "$@ - keyword $(printf '\044Id\044') not modified.."

    )

  fi

  git add "$@" && s="added to index " || s="indexing failed"
  udfDebug 0 "${s} .. \"${@}\""

}
#******
udfMain() {

  udfThrowOnCommandNotFound bc date git grep sed xargs

  local i s

  eval set -- "$( _ sArg )"

  [[ $1 =~ ^--?h ]] && udfUsage

  if LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null;
  then

    i=0

  else

    i="$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )"

  fi

  udfIsNumber $i || eval $(                                                    \
                                                                               \
    udfOnError throw NotNumber "$i - summary of the commits expected"          \
                                                                               \
  )

  udfDebug 0 "try add to index with $(printf -- '\044Id\044') ${i}:"

  if [[ $@ ]]; then

    for s in "$@"; do

      udfGitAddWithId $i "$s"

    done

  else

    while read -t 8 s; do

      if   [[ $s =~ ^@@ ]]; then

        udfGitAddWithId $i "${s#@@*}"

      elif [[ $s =~ ^M[^M][[:space:]](.*)$ ]]; then

        udfDebug 0 "already indexed .. \"${BASH_REMATCH[1]}\""

      fi

    done< <( git status -s $s | sed -re "s/^[ AM][M].(.*)$/@@\1/" )

  fi

}
#
#
#
udfMain
#
