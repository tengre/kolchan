#!/bin/bash
#
# $Id: kolchan-up2deb 90 2019-05-29 18:11:57+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk

: ${_kolchan_pathLib:=/usr/share/kolchan}

. ${_kolchan_pathLib}/libsys.sh || error NoSuchFile throw -- libsys.sh

kolchan-up2deb::usage() {

  local rc=$? aId
  eval "aId=( $Id: kolchan-up2deb 90 2019-05-29 18:11:57+04:00 yds $ )"

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${aId[2]}"                                                     \
            "${aId[3]}"                                                        \
            "2016-$(std::date %Y)"

#****h* kolchan/kolchan-up2deb
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Easy way to create or upgrade a source code debian package from an upstream
#    revision. Wrapper for dh_make and uupdate, used shared with other packaging
#    tools  configuration. This  useful  for  automation build process - jenkins
#    pipelines and other CI.
#  USAGE
#    kolchan-up2deb <options>
#  ARGUMENTS
#    -h, --help               - show this usage and exit
#    -s, --path-source <path> - select source tree root path. May  be  read from
#                               config. Default - ~/src
#    -t, --path-target <path> - select package tree root path. May  be read from
#                               config. Default - ~/builds
#    -p, --project <name>     - set project name
#    -c, --config <file>      - configuration  file for share build data between
#                               building tools
#    -B, --basebuild ...      - use this build version for upgrade.  May be used
#                               special keywords - 'init' -create package source
#                               'auto' - try  get last build version from builds
#                               folder ( see --path-target option )
#    -v, --verbosity <number> - set DEBUGLEVEL for debug messages
#    -V, --version            - set  version  for target package source. Special
#                               keyword  'git-tag'  enable  last tag from git as
#                               version
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#
#    kolchan-up2deb -p hello-world
#
	EOF

  exit $rc

}
#******
#
#
#
kolchan-up2deb::main() {

  throw on CommandNotFound bc git grep head ls mv uupdate tail tar tr xargs

  local -a a
  local fn fnConfig i iBuildNumber pathBuilds pathSource s sBaseBuild sBuildVersion sProject sVersion

  CFG cfg
  cfg.bind.cli help{h} path-source{s}: project{p}: path-builds{b}: basebuild{B}: config{c}: version{V}: verbosity{v}:

  [[ $( cfg.getopt help ) ]] && kolchan-up2deb::usage

  DEBUGLEVEL=$( cfg.getopt verbosity )
  std::isNumber $DEBUGLEVEL || DEBUGLEVEL=1

    fnConfig="$( cfg.getopt config    )"
    sProject="$( cfg.getopt project   )"
  sBaseBuild="$( cfg.getopt basebuild )"

  if   [[ ! $fnConfig && $sProject ]]; then

    cfg.storage.use ${sProject}.project.cfg

  elif [[ $fnConfig && -f $fnConfig ]]; then

    cfg.storage.use $fnConfig

  ## TODO remove '/' or set error
  elif [[ $fnConfig ]]; then

    cfg.storage.use ${fnConfig}.project.cfg

  elif [[ ! $fnConfig && ! $sProject ]]; then

    cfg.storage.use

  fi

  fnConfig=$( cfg.storage.show )

  err::debug 1 project configuration $fnConfig

  cfg.load

    sProject="$( cfg.get     []project   )" ||   sProject=$PROJECT
  pathBuilds="$( cfg.get [path]builds    )" || pathBuilds=~/builds

  if ! pathSource="$( cfg.get [path]source )"; then

    [[ $sProject ]] && pathSource=~/src/${sProject} || error MissingArgument throw -- 'source project undefined, see -s option'

  fi

  throw on NoSuchDir $pathSource
  [[ $sProject ]] || sProject=${pathSource##*/}

  cfg.set [path]source   = $pathSource
  cfg.set     []project  = $sProject

  throw on NoSuchDir $pathBuilds
  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  rm -rf *.orig

  err::debug 1 "source project $sProject"

  cd $pathSource || error NotPermitted throw -- $pathSource

  if ! LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null
  then

    iBuildNumber=$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )

    if ! std::isNumber $iBuildNumber; then
      [[ $PRJ_COMMITS ]] && iBuildNumber=$PRJ_COMMITS
    fi

  fi

  sVersion=$( cfg.get []version )
  [[ $sVersion =~ git.*tag ]] && sVersion=$( git tag -l --sort=version:refname | tail -n 1 )
  if [[ ! $sVersion ]]; then

    if   [[ -s VERSION ]]; then

      a=( $( < VERSION ) )
      sVersion=${a[0]}
      iBuildNumber=${a[1]}

    elif [[ -s ChangeLog ]]; then

      sVersion=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')

    fi

  fi

  [[ $sVersion =~ [0-9]+.*[0-9]+ ]] || error InvalidArgument throw -- $sVersion
  std::isNumber $iBuildNumber || iBuildNumber=$( std::date %s )
  sBuildVersion=${sProject}-${sVersion}.${iBuildNumber}

  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  if [[ $sBuildVersion == $sBaseBuild ]]; then

    err::debug 1 base build is same a target - ${sBaseBuild}, abort..
    return 1

  fi

  SYS::RSYNC rsync
  rsync.title      = "prepare target $sBuildVersion from ${sBaseBuild}"
  rsync.options    = -aCrv
  rsync.pathSource = ${pathSource}/
  rsync.pathTarget = ${pathBuilds}/${sBuildVersion}
  rsync.onFailure  = throw
  rsync.run

  err::debug 1 "prepare build $sBuildVersion"
  tar cfz ${sBuildVersion}.tar.gz $sBuildVersion || error NotExistNotCreated throw "${sBuildVersion}.tar.gz"

  if [[ ! $sBaseBuild ]]; then

    sBaseBuild=$( ls -td1 --group-directories-first ${sProject}* | head -n 1 )
    if [[ $sBaseBuild && -d ${pathBuilds}/${sBaseBuild}/debian ]]; then
      err::debug 1 "found previous build - ${pathBuilds}/${sBaseBuild} - try use uupdate"
    else
      err::debug 1 "valid previous build not found, try create by dh_make"
      sBaseBuild=init
    fi

  fi

  err::debug 2 "base build: $sBaseBuild"

  if [[ $sBaseBuild =~ ^(init|0)$ ]]; then

    err::debug 1 "initial build :: path ${pathBuilds}/${sBuildVersion}"
    cd $sBuildVersion || error NotPermitted throw "${pathBuilds}/${sBuildVersion}"
    ## TODO try automatically select arch-independent or no
    dh_make -y -s -i -c gpl2 --file ../${sBuildVersion}.tar.gz
    cfg.set [dh_make]status    = $?
    cfg.set [dh_make]timestamp = $( std::date %s )
    cfg.set [path]target       = ${pathBuilds}/${sBuildVersion}
    [[ $( cfg.get [dh_make]status ) != '0' ]] && cfg.set []basebuild = $sBuildVersion

  else

    rm -rf $sBuildVersion
    throw on MissingArgument $sBaseBuild
    throw on NoSuchDir ${pathBuilds}/${sBaseBuild}
    err::debug 1 "build path $pathBuilds :: prev build $sBaseBuild"
    cd $sBaseBuild || error NotPermitted throw "${pathBuilds}/${sBaseBuild}"

    std::temp fn
    echo -n "start uupdate:"

    while read; do
      if [[ $REPLY =~ ^return.code:.(.*)$ ]]; then
        cfg.set [uupdate]status = ${BASH_REMATCH[1]}
        if [[ $( cfg.get [uupdate]status ) != '0' ]]; then
          echo "fail.."
          err::debug 1 stderr:
          err::debug 1 && cat $fn 1>&2
          i=1
        else
          echo "ok!"
          echo "target path ${pathBuilds}/${sBuildVersion}"
          cfg.set [path]target    = ${pathBuilds}/${sBuildVersion}
          cfg.set     []basebuild = $sBuildVersion
          i=0
        fi
        cfg.set [uupdate]timestamp = $( std::date %s )
      else
        echo $REPLY > $fn
        echo -n '.'
      fi
    done< <( LC_ALL=C uupdate ${sBuildVersion}.tar.gz 2>&1; echo "return code: $?" )

  fi

  err::debug 1 status of the preparation target $s from $sBaseBuild:
  cfg.show
  cfg.save
  cfg.free

  if (( i == 0 )); then
    return 0
  else
    cd $pathBuilds && rm -rf $s
    return 1
  fi

}
#
#
#
kolchan-up2deb::main
#
