#!/usr/bin/env bash
#
# $Id: kolchan-builddeb 98 2019-05-30 23:44:57+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk

: ${_kolchan_pathLib:=/usr/share/kolchan}

. ${_kolchan_pathLib}/libsys.sh || error NoSuchFile throw -- libsys.sh

kolchan-builddeb::usage() {

  local rc=$? aId
  eval "aId=( $Id: kolchan-builddeb 98 2019-05-30 23:44:57+04:00 yds $ )"

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${aId[2]}"                                                     \
            "${aId[3]}"                                                        \
            "2016-$(std::date %Y)"

#****h* kolchan/kolchan-builddeb
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Easy  way  to  build  debian  package.  Wrapper for dpkg-buildpackage, used
#    shared with other packaging tools configuration. This useful for automation
#    build process - jenkins pipelines and other CI.
#  USAGE
#    kolchan-builddeb <options>
#  ARGUMENTS
#    -h, --help               - show this usage and exit
#    -m, --mode <mode>        - select source|any|all|binary|full mode. Required
#    -s, --path-source <path> - select source tree root path. May  be  read from
#                               config. Default - ~/src
#    -t, --path-target <path> - select package tree root path. May  be read from
#                               config. Default - ~/builds
#    -p, --project <name>     - set project name
#    -c, --config <file>      - configuration  file for share build data between
#                               building tools
#    -v, --verbosity <number> - set DEBUGLEVEL for debug messages
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#
#    kolchan-builddeb -p hello-world
#
	EOF

  exit $rc

}
#******
#
#
#
kolchan-builddeb::main() {

  throw on CommandNotFound dpkg-buildpackage head grep rsync sed tail wc

  local fn fnConfig pathTarget pathSource sCodeName sMode sProject
  local -a

  CFG cfg
  cfg.bind.cli mode{m}: path-source{s}: path-target{t}: config{c}: project{p}: verbosity{v}: help{h}

  [[ $( cfg.getopt help ) ]] && kolchan-builddeb::usage

  DEBUGLEVEL=$( cfg.getopt verbosity )
  std::isNumber $DEBUGLEVEL || DEBUGLEVEL=1

  fnConfig=$( cfg.getopt config  )
  sProject=$( cfg.getopt project )
  : ${sProject:=$PROJECT}
  : ${sProject:=${pathWork##*/}}

  if   [[ ! $fnConfig && $sProject ]]; then

    cfg.storage.use ${sProject}.project.cfg

  elif [[ $fnConfig && -f $fnConfig ]]; then

    cfg.storage.use $fnConfig

  ## TODO remove '/' or set error
  elif [[ $fnConfig ]]; then

    cfg.storage.use ${fnConfig}.project.cfg

  elif [[ ! $fnConfig && ! $sProject ]]; then

    ## TODO try use current directory here
    cfg.storage.use

  fi

  fnConfig=$( cfg.storage.show )

  err::debug 1 project configuration $fnConfig

  cfg.load

           s="$( cfg.get     []project )" &&   sProject=$s
       sMode="$( cfg.get     []mode    )" ||      sMode='all'
  pathSource="$( cfg.get [path]source  )" || pathSource=~/src
  pathTarget="$( cfg.get [path]target  )" || pathTarget=~/builds

  [[ $sMode =~ ^(source|any|all|binary|full)$ ]] || error InvalidArgument throw -- $sMode

  throw on NoSuchDir $pathTarget
  cd $pathTarget || error NotPermitted throw -- $pathTarget

  if [[ -d debian.upstream && -d debian ]]; then

    SYS::RSYNC rsync
    rsync.title      = merge debian.upstream with debian
    rsync.options    = -arv --exclude changelog
    rsync.pathSource = debian.upstream/
    rsync.pathTarget = debian/
    rsync.onFailure  = throw
    rsync.onSuccess  = rm -r debian.upstream
    rsync.run
    rsync.free

  fi

  throw on NoSuchFile debian/changelog

  if head -n 1 debian/changelog | grep -q UNRELEASED; then

    CFG cfgLSB
    cfgLSB.storage.use /etc/lsb-release
    cfgLSB.load []DISTRIB_CODENAME

    if sCodeName="$( cfgLSB.get []DISTRIB_CODENAME )"; then

      err::debug 2 debian/changelog - use codename $sCodeName
      sed -i "1 s/UNRELEASED/$sCodeName/" debian/changelog

    else

      err::debug 2 DISTRIB_CODENAME value not loaded from /etc/lsb-release

    fi

    cfgLSB.free

  else

    err::debug 2 UNRELEASED tag not found on debian/changelog

  fi

  std::temp fn
  echo -n "start building:"
  while read; do

    if   [[ $REPLY =~ dpkg-genchanges.--build=(source|any|all|binary|full).\>../(.*)$ ]]; then
      cfg.set [$sMode]${BASH_REMATCH[1]} = ${BASH_REMATCH[2]}
    elif [[ $REPLY =~ dpkg-deb:.building.package.*in.*../(.*\.deb) ]]; then
      cfg.set [$sMode]package = ${BASH_REMATCH[1]}
    elif [[ $REPLY =~ ^return.code:.(.*)$ ]]; then
      cfg.set [$sMode]status = ${BASH_REMATCH[1]}
      if [[ $( cfg.get [$sMode]status ) != '0' ]]; then
        echo "fail.."
        err::debug 1 stderr:
        cat $fn 1>&2
      else
        echo "ok!"
      fi
      cfg.set [$sMode]timestamp = $( std::date %s )
    else
      echo $REPLY >> $fn
      echo -n '.'
    fi

  done< <( LC_ALL=C dpkg-buildpackage --build=$sMode -rfakeroot 2>&1; echo "return code: $?" )

  err::debug 1 build states:
  cfg.show
  cfg.save
  cfg.free

}
#
#
#
kolchan-builddeb::main
#
