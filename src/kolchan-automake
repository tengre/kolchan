#!/usr/bin/env bash
#
# $Id: kolchan-automake 107 2019-06-06 02:26:39+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
kolchan-automake::usage() {

  local rc=$? aId
  eval "aId=( $Id: kolchan-automake 107 2019-06-06 02:26:39+04:00 yds $ )"

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${aId[2]}"                                                     \
            "${aId[3]}"                                                        \
            "2016-$(std::date %Y)"

#****h* kolchan/kolchan-automake
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    building a project using autotools based on the prepared Automake.am files
#    in each subdirectory. ChangeLog file is also required. Supported format:
#        <date (date -R stdout)>
#        <release comment (new, bugfix, ...)>
#        Version <version string>
#  USAGE
#    kolchan-automake <options>
#  ARGUMENTS
#    -h, --help               - show this usage and exit
#    -c, --config <name>      - set config file (full path or short name)
#    -p, --project <name>     - set project name.  If  no  configuration file is
#                               specified,  the project name is used to generate
#                               the configuration file name.
#    -s, --path-source <path> - select source path. Maybe read from config file.
#                               Default  is  ~/src. If source path not specified
#                               then this tool should be invoked within a folder
#                               containing the source code.
#    -v, --verbosity <number> - set DEBUGLEVEL for debug messages
#    -V, --version ...        - set version
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#	mkdir -p ~/src/hello-world
#	cd       ~/src/hello-world
#	cat <<- MAKEFILE > Makefile.am
#	hello_world_SOURCES = hello_world.c
#	bin_PROGRAMS        = hello_world
#	DESTDIR             =
#	MAKEFILE
#	cat <<- HELLOWORLD > hello_world.c
#	#include <stdio.h>
#	int main() {
#		printf( "%s\n", "hello, world!" );
#	}
#	HELLOWORLD
#	cat <<- CHANGELOG > ChangeLog
#	$( date -R )
#	Initial release
#	Version 0.01
#	CHANGELOG
#
#	hash git 2>/dev/null && git init && git add . && git commit -m "Initial"
#	kolchan-automake
#
	EOF

  exit $rc

}
#******
#
#
#
kolchan-automake::main() {

  throw on CommandNotFound autoscan autoheader aclocal autoconf autoreconf automake cat cut grep mv pwd robodoc head tr touch sed xargs

  local fn pathSource s sAuthor sProject sVersion

  CFG cfg
  cfg.bind.cli config{c}: help{h} project{p}: path-source{s}: verbosity{v}: version{V}:

  [[ $( cfg.getopt help   ) ]] && kolchan-automake::usage

    fnConfig="$( cfg.getopt config  )"
    sProject="$( cfg.getopt project )"
  pathSource="$( cfg.getopt path-source )"
  : ${sProject:=$PROJECT}

  [[ $pathSource && -d $pathSource ]] || pathSource="$( pwd )"
  : ${sProject:=${pathSource##*/}}

  cd "$pathSource" || error NotPermitted throw -- $pathSource
  throw on NoSuchFile ChangeLog

  if   [[ ! $fnConfig && $sProject ]]; then

    cfg.storage.use ${sProject}.project.cfg

  elif [[ $fnConfig ]] && touch $fnConfig 2>/dev/null; then

    cfg.storage.use $fnConfig

  ## TODO remove '/' or set error
  elif [[ $fnConfig ]]; then

    cfg.storage.use ${fnConfig}.project.cfg

  elif [[ ! $fnConfig && ! $sProject ]]; then

    cfg.storage.use

  fi

  fnConfig=$( cfg.storage.show )
  err::debug 1 project configuration $fnConfig

  cfg.load

  DEBUGLEVEL=$( cfg.get verbosity )
  std::isNumber $DEBUGLEVEL || DEBUGLEVEL=1

  sVersion=$( cfg.get version )

  errorify on CommandNotFound git && : ${sAuthor:="$( git config --get user.name ) <$( git config --get user.email )>"}

  : ${sAuthor:="${DEBFULLNAME:-$USER} <${DEBEMAIL:-$USER@localhost.localdomain}>"}

  [[ -s AUTHORS ]] || echo "$sAuthor" > AUTHORS

  for fn in NEWS README TODO; do [[ -f $fn ]] || touch $fn; done

  : ${sVersion:=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')}

  throw on EmptyVariable sVersion

  err::debug 2 project info: name=$sProject version=$sVersion

  sEmail="$(grep -o -E '<.*>' AUTHORS | tr -d '<|>' | head -n 1)"

  cfg.set     []version = $sVersion
  cfg.set     []project = $sProject
  cfg.set     []author  = $sAuthor
  cfg.set     []email   = $sEmail
  cfg.set [path]source  = $pathSource
  cfg.save

  autoscan
  cfg.set [autotools]autoscan = $?
  mv configure.scan configure.ac || throw on NoSuchFile configure.ac

  autoheader
  cfg.set [autotools]autoheader = $?

  sed -i -e "s/AC_INIT.*/AC_INIT(${sProject}, ${sVersion}, ${sEmail})\nAM_INIT_AUTOMAKE/ig" configure.ac

  for s in aclocal autoconf autoreconf 'automake --add-missing --copy'; do
    $s
    cfg.set [autotools]${s%% *} = $?
  done

  if errorify on CommandNotFound git-add-id; then

    git-add-id
    [[ -s VERSION ]] && cfg.set []build version = $( head -n 1 VERSION )
    cfg.set []git describe = $( git describe )

  fi

  if errorify on CommandNotFound ./configure make; then

    ./configure --prefix=/usr
    rc=$?
    cfg.set [autotools]configure = $rc
    cfg.set          []archindep = $( grep -qw ^gcc config.log && echo false || echo true )
    if (( rc == 0 )); then
      make
      cfg.set [autotools]make = $?
    fi

  else

    cfg.set []Command not found = $( err::status.show )

  fi

  cfg.set [autotools]timestamp = $( std::date %s )
  cfg.save
  cfg.show
  cfg.free

}
#
#
#
kolchan-automake::main
#
