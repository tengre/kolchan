#!/usr/bin/env bash
#
# $Id: kolchan-automake 90 2019-05-29 18:11:57+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
kolchan-automake::usage() {

  local rc=$? aId
  eval "aId=( $Id: kolchan-automake 90 2019-05-29 18:11:57+04:00 yds $ )"

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${0##*/}"                                                         \
            "rev${aId[2]}"                                                     \
            "${aId[3]}"                                                        \
            "2016-$(std::date %Y)"

#****h* kolchan/kolchan-automake
	cat <<-EOF | tr -d '#'
#  DESCRIPTION
#    Preparing project source tree with autotools support. Makefile.am for each
#    compiled folder requred, for root of the project 'ChangeLog' file required
#    This git oriented tool be invoked within a directory containing the source
#    code.
#  USAGE
#    kolchan-automake <options>
#  ARGUMENTS
#    -h, --help               - show this usage and exit
#    -c, --config <name>      - set config file (full path or short name)
#    -p, --project <name>     - set project name
#    -v, --verbosity <number> - set DEBUGLEVEL for debug messages
#    -V, --version ...        - set version
#  USES
#    bashlyk >= 1.94
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#
#    cd ~/src
#    mkdir -p helloworld
#    kolchan-automake
#
	EOF

  exit $rc

}
#******
#
#
#
kolchan-automake::main() {

  throw on NoSuchFile ChangeLog
  throw on CommandNotFound autoscan autoheader aclocal autoconf autoreconf automake cat cut grep mv pwd robodoc head tr touch sed xargs

  local fn pathWork sAuthor sProject sVersion

  CFG cfg
  cfg.bind.cli config{c}: help{h} project{p}: verbosity{v}: version{V}:

  [[ $( cfg.getopt help   ) ]] && kolchan-automake::usage
  pathWork="$( pwd )"

  fnConfig=$( cfg.getopt config  )
  sProject=$( cfg.getopt project )
  : ${sProject:=${pathWork##*/}}

  if   [[ ! $fnConfig && $sProject ]]; then

    cfg.storage.use ${sProject}.project.cfg

  elif [[ $fnConfig && -f $fnConfig ]]; then

    cfg.storage.use $fnConfig

  ## TODO remove '/' or set error
  elif [[ $fnConfig ]]; then

    cfg.storage.use ${fnConfig}.project.cfg

  elif [[ ! $fnConfig && ! $sProject ]]; then

    cfg.storage.use

  fi

  fnConfig=$( cfg.storage.show )
  err::debug 1 project configuration $fnConfig

  cfg.load

  DEBUGLEVEL=$( cfg.get verbosity )
  std::isNumber $DEBUGLEVEL || DEBUGLEVEL=1

  sVersion=$( cfg.get version )

  errorify on CommandNotFound git && : ${sAuthor:="$( git config --get user.name ) <$( git config --get user.email )>"}

  : ${sAuthor:="${DEBFULLNAME:-$USER} <${DEBEMAIL:-$USER@localhost.localdomain}>"}

  [[ -s AUTHORS ]] || echo "$sAuthor" > AUTHORS

  for fn in NEWS README TODO; do [[ -f $fn ]] || touch $fn; done

  #sProject=${sProject/-$sVersion/}
  : ${sVersion:=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')}

  throw on EmptyVariable sVersion

  err::debug 2 project info: name=$sProject version=$sVersion

  sEmail="$(grep -o -E '<.*>' AUTHORS | tr -d '<|>' | head -n 1)"

  cfg.set []version = $sVersion
  cfg.set []project = $sProject
  cfg.set []email   = $sEmail
  cfg.set []author  = $sAuthor
  cfg.save


  autoscan
  cfg.set [autotools]autoscan = $?
  mv configure.scan configure.ac || throw on NoSuchFile configure.ac

  autoheader
  cfg.set [autotools]autoheader = $?

  sed -i -e "s/AC_INIT.*/AC_INIT(${sProject}, ${sVersion}, ${sEmail})\nAM_INIT_AUTOMAKE/ig" configure.ac

  aclocal
  cfg.set [autotools]aclocal = $?

  autoconf
  cfg.set [autotools]autoconf = $?
  autoreconf
  cfg.set [autotools]autoreconf = $?
  automake --add-missing --copy
  cfg.set [autotools]automake = $?

  errorify on CommandNotFound git-add-id && git-add-id

  if errorify on CommandNotFound ./configure make; then

    ./configure --prefix=/usr
    rc=$?
    cfg.set [autotools]configure = $rc
    if (( rc == 0 )); then
      make
      cfg.set [autotools]make = $?
    fi
  else
    cfg.set []Command not found = $( err::status.show )
  fi
  cfg.set [autotools]timestamp = $( std::date %s )
  cfg.save
  cfg.show
  cfg.free

}
#
#
#
kolchan-automake::main
#
