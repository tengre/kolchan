#!/usr/bin/env bash
#
# $Git: kolchan-automake 1.0-2-142 2023-05-08 19:56:02+00:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
kolchan-automake::usage() {

  local rc=$? dt="$( stat -c %y $0 )" S="$( exec -c printf -- '\044')"
  local -a a=( $(grep -o "${S}Git: .*${S}" $0 | head -n 1) )

  printf -- "\n  %s %s %s, (c) %s\n\n"                                         \
            "${a[1]:=${0##*/}}"                                                \
            "${a[2]:=?}"                                                       \
            "${a[3]:=${dt%% *}}"                                               \
            "2016-$(std::date %Y)"

#****h* kolchan/kolchan-automake
	cat <<-EOF | sed -r -e "s/^#\t?//g"
#  DESCRIPTION
#    building a project using autotools based on the prepared Automake.am files
#    in each subdirectory. ChangeLog file is also required. Supported format:
#        <date (date -R stdout)>
#        <release comment (new, bugfix, ...)>
#        Version <version string>
#  USAGE
#    kolchan-automake <options>
#  ARGUMENTS
#    -h, --help               - show this usage and exit
#    -c, --config <name>      - set config file (full path or short name)
#    -p, --project <name>     - set project name.  If  no  configuration file is
#                               specified,  the project name is used to generate
#                               the configuration file name.
#    -s, --path-source <path> - select source path. Maybe read from config file.
#                               Default is a current directory.
#    -N, --noscan             - disable autoscan for preliminary configuration,
#                               this is default.
#    -Y, --scan               - enable autoscan for preliminary configuration.
#                               Warning:  may  include  unwanted dependencies of
#                               external modules, e.g. from node_modules
#    -v, --verbosity <number> - set DEBUGLEVEL for debug messages
#    -V, --version ...        - set version for source
#  USES
#    bashlyk >= 1.96
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#  EXAMPLE
#	mkdir -p ~/src/hello-world
#	cd       ~/src/hello-world
#	cat <<- MAKEFILE > Makefile.am
#	hello_world_SOURCES = hello_world.c
#	bin_PROGRAMS        = hello_world
#	DESTDIR             =
#	MAKEFILE
#	cat <<- HELLOWORLD > hello_world.c
#	#include <stdio.h>
#	int main() {
#		printf("Hello, World!\n");
#		return 0;
#	}
#	HELLOWORLD
#	cat <<- CHANGELOG > ChangeLog
#	$( date -R )
#	Initial release
#	Version 0.01
#	CHANGELOG
#
#	hash git 2>/dev/null && git init && git add . && git commit -m "Initial" && git tag -a 0.9 -m "prerelease"
#	kolchan-automake --scan
#
	EOF

  exit $rc

}
#******
#****f* kolchan/kolchan-automake::scanConfigFiles
#  DESCRIPTION
#    generate AC_CONFIG_FILES options as autoscan
#
kolchan-automake::scanConfigFiles(){
  local head='AC_CONFIG_FILES(['
  local tail='])'
  local form="$(eval 'printf -- "%${#head}s"')"
  local bool s
  local -a a=("programs" "libraries" "header files" "typedefs, structures, and compiler characteristics" "library functions")

  for s in "${a[@]}"; do
    printf -- "\n# Checks for %s.\n" "$s"
  done

  printf -- "\n%s" "$head"
  while read s; do
    if [[ ! $bool ]]; then
      printf -- "%s" "$s"
      bool=1
      continue
    fi
    printf -- "\n%s%s" "$form" "$s"
  ## sort order from https://cutt.ly/TJ2xSfI
  done< <(find . -name Makefile.am -type f -printf '%h\0%d\0%p\n' | sort -t '\0' -n | awk -F '\0' '{print $3}' | sed -r -e "s/^\.\/(.*Makefile)\.am$/\1/g")
  printf -- "%s\n%s\n" "$tail" "AC_OUTPUT"
}
#******
#
#
#
kolchan-automake::main() {

  throw on CommandNotFound aclocal autoscan autoheader autoconf autoreconf automake awk cat cut find grep mv pwd robodoc head tr touch sed xargs

  local fn pathSource s sAuthor sEmail sGitTag sFullName sProject sVersion

  CFG cfg
  cfg.bind.cli config{c}: help{h} noscan{N} project{p}: path-source{s}: scan{Y} verbosity{v}: version{V}:

  [[ $( cfg.getopt help ) ]] && kolchan-automake::usage

    fnConfig="$( cfg.getopt config      )"
    sProject="$( cfg.getopt project     )"
  pathSource="$( cfg.getopt path-source )"
    sVersion="$( cfg.getopt version     )"
      noscan="$( cfg.getopt noscan      )"

  : ${sProject:=$PROJECT}

  [[ $pathSource && -d $pathSource ]] || pathSource="$( pwd )"
  : ${sProject:=${pathSource##*/}}

  cd "$pathSource" || error NotPermitted throw -- $pathSource
  throw on NoSuchFile ChangeLog

  if   [[ ! $fnConfig && $sProject ]]; then

    cfg.storage.use ${sProject}.project.cfg

  elif [[ $fnConfig ]] && touch $fnConfig 2>/dev/null; then

    cfg.storage.use $fnConfig

  elif [[ $fnConfig ]]; then

    cfg.storage.use ${fnConfig//\//_}.project.cfg

  elif [[ ! $fnConfig && ! $sProject ]]; then

    cfg.storage.use

  fi

  fnConfig=$( cfg.storage.show )

  cfg.load

  sFullName="$( cfg.get name  )"
     sEmail="$( cfg.get email )"
       scan="$( cfg.get scan  )"

  [[ ! $noscan && $scan =~ 1|true ]] && scan=true || scan=false

  DEBUGLEVEL=$( cfg.get verbosity )
  std::isNumber $DEBUGLEVEL || DEBUGLEVEL=1
  err::debug 1 project configuration $fnConfig

  if hash git 2>/dev/null; then
    sFullName="$( git config --get user.name  )"
       sEmail="$( git config --get user.email )"
            s="$( git describe --abbrev=0 )"
      # remove lead 'v' from tag
      sGitTag=${s#*v}
  fi

  #set force email and fullname via env
  if   [[ $EMAIL && $NAME ]]; then
       sEmail="$EMAIL"
    sFullName="$NAME"
  elif [[ $DEBEMAIL && $DEBFULLNAME ]]; then
    : ${sEmail:="$DEBEMAIL"}
    : ${sFullName:="$DEBFULLNAME"}
  fi

  : ${sEmail:=${USER}@localdomain}
  : ${sFullName:=$USER}

     sEmail="$(std::trim $sEmail)"
  sFullName="$(std::trim $sFullName)"

  sAuthor="$sFullName <${sEmail}>"

  [[ -s AUTHORS ]] || echo "$sAuthor" > AUTHORS

  for fn in NEWS README TODO; do [[ -f $fn ]] || touch $fn; done

  : ${sVersion:=$sGitTag}
  : ${sVersion:=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')}
  : ${sVersion:=$( cfg.get version )}

  throw on EmptyVariable sVersion

  err::debug 2 project info: name=$sProject version=$sVersion

  cfg.set     []version = $sVersion
  cfg.set     []project = $sProject
  cfg.set     []author  = $sAuthor
  cfg.set     []email   = $sEmail
  cfg.set     []name    = $sFullName
  cfg.set [path]source  = $pathSource

  cfg.save

  ## TODO - ignore external configurations, for example node_modules/*Makefile
  rm -f configure.ac
  autoscan
  cfg.set [autotools]autoscan = $?
  if [[ -f configure.scan ]]; then
    if [[ $scan == 'true' ]]; then
      err::debug 1 full autoscan
      mv -f configure.scan configure.ac
    else
      grep -Pv '^(#|$)' configure.scan | head -n 2 > configure.ac
      kolchan-automake::scanConfigFiles >> configure.ac
      rm -f configure.scan
    fi
  fi

  throw on NoSuchFile configure.ac

  autoheader
  cfg.set [autotools]autoheader = $?

  sed -i -e "s/AC_INIT.*/AC_INIT(${sProject}, ${sVersion}, ${sEmail})\nAM_INIT_AUTOMAKE/ig" configure.ac

  for s in aclocal autoconf autoreconf 'automake --add-missing --copy'; do
    $s
    cfg.set [autotools]${s%% *} = $?
  done

  if errorify on CommandNotFound git-add-id; then

    git-add-id
    [[ -s VERSION ]] && cfg.set []build version = $( head -n 1 VERSION )
                        cfg.set []git describe  = $( git describe )

  fi

  if errorify on CommandNotFound ./configure make; then

    ./configure --prefix=/usr
    rc=$?
    cfg.set [autotools]configure = $rc
    cfg.set          []archindep = $( grep -qw ^gcc config.log && echo false || echo true )
    if (( rc == 0 )); then
      make
      cfg.set [autotools]make = $?
    fi

  else

    cfg.set []Command not found = $( err::status.show )

  fi

  cfg.set []scan   = $scan
  cfg.set []noscan = ''

  cfg.set [autotools]timestamp = $( std::date %Y-%m-%dT%H:%M:%S%z )
  err::debug 1 current build status: && cfg.show
  cfg.save
  cfg.free

}
#
#
#
kolchan-automake::main
#
