#!/bin/bash
#
# $Id: uupdeb 63 2019-05-16 19:06:42+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk
#
#
#
 _rsync_hError[0]="Success"
 _rsync_hError[1]="Syntax or usage error"
 _rsync_hError[2]="Protocol incompatibility"
 _rsync_hError[3]="Errors selecting input/output files, dirs"
 _rsync_hError[4]="Requested action not supported: an attempt was made to manipulate 64-bit files on a platform that cannot support them; or an option was specified that is supported by the client and not by the server."
 _rsync_hError[5]="Error starting client-server protocol"
 _rsync_hError[6]="Daemon unable to append to log-file"
_rsync_hError[10]="Error in socket I/O"
_rsync_hError[11]="Error in file I/O"
_rsync_hError[12]="Error in rsync protocol data stream"
_rsync_hError[13]="Errors with program diagnostics"
_rsync_hError[14]="Error in IPC code"
_rsync_hError[20]="Received SIGUSR1 or SIGINT"
_rsync_hError[21]="Some error returned by waitpid()"
_rsync_hError[22]="Error allocating core memory buffers"
_rsync_hError[23]="Partial transfer due to error"
_rsync_hError[24]="Partial transfer due to vanished source files"
_rsync_hError[25]="The --max-delete limit stopped deletions"
_rsync_hError[30]="Timeout in data send/receive"
_rsync_hError[35]="Timeout waiting for daemon connection"
#
#
#
updeb::main() {

  throw on CommandNotFound bc git grep head mv pwd rsync uupdate tail tar tr wc xargs

  local -a a
  local fn fnConfig i iBuildNumber pathBuilds pathSource s sBaseBuild sBuildVersion sProject sVersion 

  CFG cfg
  cfg.bind.cli path-source{s}: project{p}: path-builds{b}: basebuild{B}: config{c}:
  fnConfig=$( cfg.getopt config ) || fnConfig=$( cfg.storage.use && cfg.storage.show )
  cfg.storage.use $fnConfig
  err::debug 0 project configuration $( cfg.storage.show )

  cfg.load

    sProject="$( cfg.get     []project   )" ||   sProject=$PROJECT
  sBaseBuild="$( cfg.get     []basebuild )"
  pathBuilds="$( cfg.get [path]builds    )" || pathBuilds=~/builds

  if ! pathSource="$( cfg.get [path]source )"; then

    [[ $sProject ]] && pathSource=~/src/${sProject} || error MissingArgument throw -- 'source project undefined, see -s option'

  fi

  throw on NoSuchDir $pathSource
  [[ $sProject ]] || sProject=${pathSource##*/}
 
  throw on NoSuchDir $pathBuilds
  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  rm -rf *.orig

  [[ $sBaseBuild ]] || sBaseBuild=$( ls -td1 --group-directories-first ${sProject}* | head -n 1 )

  throw on NoSuchDir ${pathBuilds}/${sBaseBuild}

  err::debug 0 "source project $sProject"

  cd $pathSource || error NotPermitted throw -- $pathSource

  if ! LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null
  then

    iBuildNumber=$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )

    if ! std::isNumber $iBuildNumber; then
      [[ $PRJ_COMMITS ]] && iBuildNumber=$PRJ_COMMITS
    fi

  fi

  #sVersion=$( git tag -l --sort=version:refname | tail -n 1 )
  if [[ ! $sVersion ]]; then

    if   [[ -s VERSION ]]; then

      a=( $( < VERSION ) )
      sVersion=${a[0]}
      iBuildNumber=${a[1]}

    elif [[ -s ChangeLog ]]; then

      sVersion=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')

    fi

  fi

  [[ $sVersion =~ [0-9]+.*[0-9]+ ]] || error InvalidArgument throw -- $sVersion
  std::isNumber $iBuildNumber || iBuildNumber=$( std::date %s )
  sBuildVersion=${sProject}-${sVersion}.${iBuildNumber}

  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  if [[ $sBuildVersion == $sBaseBuild ]]; then

    err::debug 0 base build is same a target - ${sBaseBuild}, abort..
    return 1

  fi

  err::debug 0 "prepare target $sBuildVersion from ${sBaseBuild}:"

  std::temp fn
  while read; do

    err::debugf 0 '%s' '.'

  done< <( rsync -aCrv ${pathSource}/ ${pathBuilds}/${sBuildVersion} 2>$fn; echo $? >>$fn )

  if (( $( tail -n 1 $fn ) > 0 )); then

    err::debugf 0 '%s' '?'
    a=( $( wc -l $fn ) )

    (( ${a[0]} == 1 )) || err::debug 0 'warns:'

    if (( ${a[0]} > 10 )); then

      head -n 4 $fn && echo '...' && tail -n 4 $fn

    else

      (( ${a[0]} > 0 )) && std::cat < $fn

    fi >&2

    _bashlyk_hError[$rc]="${_rsync_hError[$rc]}"
    error $rc throw "rsync: ${pathSource}/ -> ${pathBuilds}/${sBuildVersion}"

  else

    err::debug 0 'ok'

  fi
  
  err::debug 0 "prepare build $sBuildVersion"
  tar cfz ${sBuildVersion}.tar.gz $sBuildVersion || error NotExistNotCreated throw "${sBuildVersion}.tar.gz"

  rm -rf $sBuildVersion

  err::debug 0 "build path $pathBuilds :: prev build $sBaseBuild"
  throw on NoSuchDir ${pathBuilds}/${sBaseBuild}
  cd $sBaseBuild || error NotPermitted throw "${pathBuilds}/${sBaseBuild}"

  std::temp fn
  echo -n "start uupdate:"

  while read; do
    if [[ $REPLY =~ ^return.code:.(.*)$ ]]; then
      cfg.set [uupdate]status = ${BASH_REMATCH[1]}
      if [[ $( cfg.get [uupdate]status ) != '0' ]]; then
        echo "fail.."
        err::debug 0 stderr:
        cat $fn 1>&2
        i=1
      else
        echo "ok!"
        echo "target path ${pathBuilds}/${sBuildVersion}"
        cfg.set [path]target = ${pathBuilds}/${sBuildVersion}
        i=0
      fi
      cfg.set [uupdate]timestamp = $( std::date %s )
    else
      echo $REPLY > $fn
      echo -n '.'
    fi
  done< <( LC_ALL=C uupdate ${sBuildVersion}.tar.gz 2>&1; echo "return code: $?" )

  err::debug 0 status of the preparation target $s from $sBaseBuild:
  cfg.show
  cfg.save
  cfg.free

  if (( i == 0 )); then 
    return 0
  else
    cd $pathBuilds && rm -rf $s
    return 1
  fi

}
#
#
#
updeb::main
#
