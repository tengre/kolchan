#!/bin/bash
#
# $Id: uupdeb 70 2019-05-25 10:15:32+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=kolchan . bashlyk

: ${_kolchan_pathLib:=/usr/share/kolchan}

. ${_kolchan_pathLib}/libsys.sh || throw
#
#
#
updeb::main() {

  throw on CommandNotFound bc git grep head ls mv uupdate tail tar tr xargs

  local -a a
  local fn fnConfig i iBuildNumber pathBuilds pathSource s sBaseBuild sBuildVersion sProject sVersion

  CFG cfg
  cfg.bind.cli path-source{s}: project{p}: path-builds{b}: basebuild{B}: config{c}: version{V}:
  fnConfig=$( cfg.getopt config ) || fnConfig=$( cfg.storage.use && cfg.storage.show )
  cfg.storage.use $fnConfig
  err::debug 0 project configuration $( cfg.storage.show )

  cfg.load

    sProject="$( cfg.get     []project   )" ||   sProject=$PROJECT
  sBaseBuild="$( cfg.get     []basebuild )"
  pathBuilds="$( cfg.get [path]builds    )" || pathBuilds=~/builds

  if ! pathSource="$( cfg.get [path]source )"; then

    [[ $sProject ]] && pathSource=~/src/${sProject} || error MissingArgument throw -- 'source project undefined, see -s option'

  fi

  throw on NoSuchDir $pathSource
  [[ $sProject ]] || sProject=${pathSource##*/}

  cfg.set [path]source   = $pathSource
  cfg.set     []project  = $sProject

  throw on NoSuchDir $pathBuilds
  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  rm -rf *.orig

  [[ $sBaseBuild ]] || sBaseBuild=$( ls -td1 --group-directories-first ${sProject}* | head -n 1 )

  throw on NoSuchDir ${pathBuilds}/${sBaseBuild}

  err::debug 0 "source project $sProject"

  cd $pathSource || error NotPermitted throw -- $pathSource

  if ! LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null
  then

    iBuildNumber=$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )

    if ! std::isNumber $iBuildNumber; then
      [[ $PRJ_COMMITS ]] && iBuildNumber=$PRJ_COMMITS
    fi

  fi

  sVersion=$( cfg.get []version )
  [[ $sVersion =~ git.*tag ]] && sVersion=$( git tag -l --sort=version:refname | tail -n 1 )
  if [[ ! $sVersion ]]; then

    if   [[ -s VERSION ]]; then

      a=( $( < VERSION ) )
      sVersion=${a[0]}
      iBuildNumber=${a[1]}

    elif [[ -s ChangeLog ]]; then

      sVersion=$(grep -i version ChangeLog | head -n 1 | xargs | cut -f 2 -d' ')

    fi

  fi

  [[ $sVersion =~ [0-9]+.*[0-9]+ ]] || error InvalidArgument throw -- $sVersion
  std::isNumber $iBuildNumber || iBuildNumber=$( std::date %s )
  sBuildVersion=${sProject}-${sVersion}.${iBuildNumber}

  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  if [[ $sBuildVersion == $sBaseBuild ]]; then

    err::debug 0 base build is same a target - ${sBaseBuild}, abort..
    return 1

  fi

  SYS::RSYNC rsync
  rsync.title      = "prepare target $sBuildVersion from ${sBaseBuild}"
  rsync.options    = -aCrv
  rsync.pathSource = ${pathSource}/
  rsync.pathTarget = ${pathBuilds}/${sBuildVersion}
  rsync.onFailure  = throw
  rsync.run

  err::debug 0 "prepare build $sBuildVersion"
  tar cfz ${sBuildVersion}.tar.gz $sBuildVersion || error NotExistNotCreated throw "${sBuildVersion}.tar.gz"

  rm -rf $sBuildVersion

  err::debug 0 "build path $pathBuilds :: prev build $sBaseBuild"
  throw on NoSuchDir ${pathBuilds}/${sBaseBuild}
  cd $sBaseBuild || error NotPermitted throw "${pathBuilds}/${sBaseBuild}"

  std::temp fn
  echo -n "start uupdate:"

  while read; do
    if [[ $REPLY =~ ^return.code:.(.*)$ ]]; then
      cfg.set [uupdate]status = ${BASH_REMATCH[1]}
      if [[ $( cfg.get [uupdate]status ) != '0' ]]; then
        echo "fail.."
        err::debug 0 stderr:
        cat $fn 1>&2
        i=1
      else
        echo "ok!"
        echo "target path ${pathBuilds}/${sBuildVersion}"
        cfg.set [path]target = ${pathBuilds}/${sBuildVersion}
        i=0
      fi
      cfg.set [uupdate]timestamp = $( std::date %s )
    else
      echo $REPLY > $fn
      echo -n '.'
    fi
  done< <( LC_ALL=C uupdate ${sBuildVersion}.tar.gz 2>&1; echo "return code: $?" )

  err::debug 0 status of the preparation target $s from $sBaseBuild:
  cfg.show
  cfg.save
  cfg.free

  if (( i == 0 )); then
    return 0
  else
    cd $pathBuilds && rm -rf $s
    return 1
  fi

}
#
#
#
updeb::main
#
