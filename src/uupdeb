#!/bin/bash
#
# $Id: uupdeb 56 2019-05-08 10:29:03+04:00 yds $
#
_bashlyk_log=nouse _bashlyk=buildpackage . bashlyk
#
#
#
 _rsync_hError[0]="Success"
 _rsync_hError[1]="Syntax or usage error"
 _rsync_hError[2]="Protocol incompatibility"
 _rsync_hError[3]="Errors selecting input/output files, dirs"
 _rsync_hError[4]="Requested action not supported: an attempt was made to manipulate 64-bit files on a platform that cannot support them; or an option was specified that is supported by the client and not by the server."
 _rsync_hError[5]="Error starting client-server protocol"
 _rsync_hError[6]="Daemon unable to append to log-file"
_rsync_hError[10]="Error in socket I/O"
_rsync_hError[11]="Error in file I/O"
_rsync_hError[12]="Error in rsync protocol data stream"
_rsync_hError[13]="Errors with program diagnostics"
_rsync_hError[14]="Error in IPC code"
_rsync_hError[20]="Received SIGUSR1 or SIGINT"
_rsync_hError[21]="Some error returned by waitpid()"
_rsync_hError[22]="Error allocating core memory buffers"
_rsync_hError[23]="Partial transfer due to error"
_rsync_hError[24]="Partial transfer due to vanished source files"
_rsync_hError[25]="The --max-delete limit stopped deletions"
_rsync_hError[30]="Timeout in data send/receive"
_rsync_hError[35]="Timeout waiting for daemon connection"
#
#
#
updeb::main() {

  throw on CommandNotFound bc git grep head mv pwd rsync uupdate tail tar tr wc xargs

  eval set -- "$( _ sArg )"

  local -a a
  local fn fnBuildInfo i pathBuilds pathSrc s sBuildPrev v

  : ${pathBuilds:=~/builds}
  : ${pathSrc:=~/src}
  
  [[ $PRJ_BUILDINFO ]] && fnBuildInfo=$PRJ_BUILDINFO || fnBuildInfo='/tmp/bashlyk.path4build'

  throw on NotExistNotCreated $pathBuilds
  cd $pathBuilds || error NotPermitted throw -- $pathBuilds

  rm -rf *.orig

  if [[ $GIT_URL ]]; then
    s=${GIT_URL##*/}
    pathSrc=$GIT_URL
    sBuildPrev=$( ls -td1 --group-directories-first ${s}* | head -n 1 )
  else
    throw on MissingArgument $1
    [[ ${1%-*} != $1 ]] || error InvalidArgument throw "$1 - expected x-y form"
    s=${1%-*}
    pathSrc=${pathSrc}/${s}
    sBuildPrev=$1
  fi

  throw on NoSuchDir ${pathBuilds}/${sBuildPrev}

  err::debug 0 "source project $s"

  throw on NoSuchDir $pathSrc
  cd $pathSrc || error NotPermitted throw -- $pathSrc

  if ! LC_ALL=C git log 2>&1 | grep '^fatal:.* not have any commits' >/dev/null
  then

    i=$( git shortlog -s | grep -oP '^\s+\d+\s+' | xargs | tr ' ' '+' | bc )

    if ! std::isNumber $i; then
      [[ $PRJ_COMMITS ]] && i=$PRJ_COMMITS
    fi

  fi

  throw on NoSuchFile VERSION

  a=( $( < VERSION ) )

  [[ ${a[0]} =~ [0-9]+.*[0-9]+ ]] || error InvalidArgument throw "${a[0]}"

  cd $pathBuilds || error NotPermitted throw $pathBuilds

  std::isNumber $i && i=${a[0]}.${i} || i=${a[0]}.${a[1]}

  std::temp fn

  err::debug 0 "prepare target ${s}-${i}:"

  while read; do

    err::debugf 0 '%s' '.'

  done< <( rsync -aCrv ${pathSrc}/ ${pathBuilds}/${s}-${i} 2>$fn; echo $? >>$fn )

  if (( $( tail -n 1 $fn ) > 0 )); then

    err::debugf 0 '%s' '?'
    a=( $( wc -l $fn ) )

    (( ${a[0]} == 1 )) || err::debug 0 'warns:'

    if (( ${a[0]} > 10 )); then

      head -n 4 $fn && echo '...' && tail -n 4 $fn

    else

      (( ${a[0]} == 0 )) && std::cat < $fn

    fi >&2

    _bashlyk_hError[$rc]="${_rsync_hError[$rc]}"
    error $rc throw "rsync: ${pathSrc}/ -> ${pathBuilds}/${s}-${i}"

  else

    err::debug 0 'ok'

  fi

  s="${s}-${i}"

  err::debug 0 "pack target $s"
  tar cfz ${s}.tar.gz $s || error NotExistNotCreated throw "${s}.tar.gz"

  rm -rf $s

  err::debug 0 "build path $pathBuilds :: prev path $sBuildPrev"
  throw on NoSuchDir ${pathBuilds}/${sBuildPrev}
  cd $sBuildPrev || error NotPermitted throw "${pathBuilds}/${sBuildPrev}"

  if uupdate ${s}.tar.gz >&2; then

    echo "${pathBuilds}/${s}" | tee $fnBuildInfo
    return 0

  else

    cd $pathBuilds && rm -rf $s
    return 1

  fi

}
#
#
#
updeb::main
#
